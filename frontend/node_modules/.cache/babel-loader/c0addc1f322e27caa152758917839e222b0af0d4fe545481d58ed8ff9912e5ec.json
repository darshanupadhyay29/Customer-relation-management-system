{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Main-panel-main\\\\panel-main-main\\\\frontend\\\\src\\\\CustomerInfo\\\\CustomerCount.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerCount = () => {\n  _s();\n  const [count, setCount] = useState(0); // Initialize count state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await axios.get(\"http://127.0.0.1:3000/home/customercount\", {\n          headers: {\n            Authorization: `Bearer ${token}` // Attach token here\n          }\n        });\n        setCount(response.data.response);\n\n        // Set count state with the fetched count value\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData(); // Call fetchData function when the component mounts\n  }, []); // Empty dependency array ensures useEffect runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(CustomerCount, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n_c = CustomerCount;\nexport default CustomerCount;\nvar _c;\n$RefreshReg$(_c, \"CustomerCount\");","map":{"version":3,"names":["axios","React","useState","useEffect","jsxDEV","_jsxDEV","CustomerCount","_s","count","setCount","fetchData","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Main-panel-main/panel-main-main/frontend/src/CustomerInfo/CustomerCount.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\n\nconst CustomerCount = () => {\n    const [count, setCount] = useState(0); // Initialize count state\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                 const token = localStorage.getItem(\"token\");\n                const response = await axios.get(\n                  \"http://127.0.0.1:3000/home/customercount\",\n                  {\n                    headers: {\n                      Authorization: `Bearer ${token}`, // Attach token here\n                    },\n                  }\n                );\n                \n                \n               setCount(response.data.response)\n                \n                // Set count state with the fetched count value\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData(); // Call fetchData function when the component mounts\n    }, []); // Empty dependency array ensures useEffect runs only once when the component mounts\n\n    return (\n        <div>          \n         {count}         \n        </div>\n    );\n};\n\nexport default CustomerCount;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvCC,SAAS,CAAC,MAAM;IACZ,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC5C,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAC9B,0CAA0C,EAC1C;UACEC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASN,KAAM,EAAC,CAAE;UACpC;QACF,CACF,CAAC;QAGFF,QAAQ,CAACK,QAAQ,CAACI,IAAI,CAACJ,QAAQ,CAAC;;QAE/B;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDT,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIL,OAAA;IAAAgB,QAAA,EACEb;EAAK;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEd,CAAC;AAAClB,EAAA,CAjCID,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}